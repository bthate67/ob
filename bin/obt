#!/usr/bin/env python3
# This file is placed in the Public Domain.

import importlib
import os
import pkgutil
import sys
import termios
import threading
import time

wd = os.path.expanduser("~/.ob")
md = os.path.join(wd, "mod")

from ob.bus import Bus
from ob.obj import Object, fmt, find, fntime, get, getmain, getname, getwd, keys, listfiles, spl, update
from ob.run import Client, Runtime
from ob.tbl import Table
from ob.trc import get_exception
from ob.tms import elapsed
from ob.ver import __version__


starttime = time.time()


class Console(Client):

    def handle(self, clt, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Kernel(Runtime):

    def error(self, txt):
        print(txt)
        sys.stdout.flush()
        
    def log(self, txt):
        if "PING" in txt or "PONG" in txt:
            return
        if self.cfg.verbose:
            print(txt)
            sys.stdout.flush()


class Log(Object):

    def __init__(self):
        super().__init__()
        self.txt = ""


class Table(Table):

   def scandir(self, path, pn="mod"):
        dn, fn = os.path.split(path)
        sys.path.insert(0, dn)
        for mn in pkgutil.walk_packages([dn,]):
            mod = importlib.import_module(mn[1], pn)
            if mod:
                k.log("load %s" % mn[1])
                self.introspect(mod)


clt = Console()
k = Kernel()
tbl = Table()


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except KeyboardInterrupt:
        pass
    except PermissionError as ex:
        print(str(ex))
    except Exception as ex:
        print(get_exception())
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


def main():
    k.boot()
    k.cfg.verbose = True
    k.cfg.mod = "mod.irc,mod.rss,mod.udp"
    if k.cfg.verbose:
        k.log("OBT %s started at %s" % (__version__, time.ctime(time.time())))
    tbl.scandir(md)
    k.start()
    k.init(k.cfg.mod)
    clt.start()
    k.wait()


wrap(main)
